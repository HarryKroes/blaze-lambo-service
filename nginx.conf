#
# Openresty architecture:
# http://openresty-reference.readthedocs.io/en/latest/Directives/
#

worker_processes 1;
pid /tmp/nginx.pid;
error_log /dev/stdout info;
daemon off;

env BLAZE_COLOR;

events {
  worker_connections 8192;
}

http {
  server_tokens off;
  sendfile off;
  tcp_nopush on;
  underscores_in_headers on;

  lua_package_path "/usr/local/openresty/lualib/?.lua";
  lua_shared_dict prometheus_metrics 10m;

  init_by_lua_block {
    ngx.shared['global_state'] = {}
    ngx.shared['global_state']['identification'] = "blaze-lambo-service"

    prometheus = require("blaze.prometheus").init()

    metric_requests = prometheus:counter(
        "nginx_http_requests_total",
        "number of http requests",
        {"job", "status", "trace_name"})
    metric_connections = prometheus:gauge(
        "nginx_http_connections",
        "number of http connections",
        {"job", "state"})
    metric_bytes_sent = prometheus:counter(
        "nginx_bytes_sent_total",
        "bytes sent",
        {"job", "trace_name"})

    ngx.log(ngx.INFO, "Identificationstring: "..ngx.shared['global_state']['identification'])
  }

  server {
    listen 5000;
    access_log off;
    root /var/www/html;

    location / {
        access_by_lua_block {
            local color = os.getenv("BLAZE_COLOR") or "Yellow"
            ngx.say(color, " Lambos incoming!")
        }
    }
  }

  log_by_lua_block {
    local job = ngx.shared['global_state']['identification']
    local trace_name = '_unknown'
    local workers = ngx.worker.count()

    metric_requests:inc(1, {job, ngx.var.status, trace_name})
    metric_bytes_sent:inc(tonumber(ngx.var.bytes_sent), {job, trace_name})
  }

}
